#!/usr/bin/env perl
use 5.010;
use strict;
use Getopt::Long 2.24, qw( :config bundling no_ignore_case no_auto_abbrev );

sub parse_cmdline_time {
	my ( $time ) = @_;
	return 0 if not defined $time;
	$time =~ /\A(?:(?:(?:(?<h>\d\d):)?(?<m>\d\d):)?(?<s>\d\d),)?(?<ms>\d{3})\z/
		or return $time;
	my %c = %+;
	$_ = 0 for grep { not defined } @c{ qw( h m s ms ) };
	my $t = 1000 * ( 60 * ( 60 * $c{h} + $c{m} ) + $c{s} ) + $c{ms};
	return $t;
}

{
	my ( $opt_speed, $opt_shift, $opt_from, $opt_until ) = 1;

	GetOptions(
		'speed|S=s' => \$opt_speed,
		'shift|s=s' => sub { $opt_shift = parse_cmdline_time $_[1] },
		'from|f=s'  => sub { $opt_from  = parse_cmdline_time $_[1] },
		'until|u=s' => sub { $opt_until = parse_cmdline_time $_[1] },
		'sub=s'     => \( my $opt_sub ),
		'sami'      => \( my $opt_smi ),
	) or exit 1;

	if ( defined $opt_sub ) {
		my %fps = (
			$opt_sub => $opt_sub,
			ntsc30   => 29.97,
			ntsc     => 23.976,
			pal      => 25,
		);
		$opt_sub = $fps{ $opt_sub };
	}

	my $slurp = do { local $/; <> };

	binmode STDOUT, ':crlf' if $slurp =~ s/\r//g;

	my $stream =
		$opt_sub ? Stream::MicroDVD->new( fps => $opt_sub ) :
		$opt_smi ? Stream::SAMI->new :
		do       { Stream::SRT->new };

	$stream->parse( $slurp );

	if ( defined $opt_from and defined $opt_until ) {
		say STDERR "Stretching subtitles from $opt_from to $opt_until";
		my $reset = $stream->chunk->[0]->from;
		for ( $stream->chunks ) { $_ -= $reset for $_->from, $_->to }
		$opt_speed = ( $opt_until - $opt_from ) / $stream->chunk->[-1]->from;
		$opt_shift = $opt_from;
	}

	say STDERR "Scaling by a factor of $opt_speed" if $opt_speed != 1.0;
	say STDERR "Shifting by $opt_shift miliseconds" if defined $opt_shift;

	for ( $stream->chunks ) {
		$_ *= $opt_speed for $_->from, $_->to;
		$_ += $opt_shift for $_->from, $_->to;
	}

	Stream::SRT->new->from( $stream )->print;
}

package Chunk; #################################################################
use Object::Tiny::Lvalue qw( from to text );


package Stream; ################################################################
use Object::Tiny::Lvalue qw( chunk );

sub parse { die }

sub chunks { @{ shift->chunk // [] } }

sub from {
	my $self = shift;
	my ( $stream ) = @_;
	my @from = map { $_->from } $stream->chunks;
	my @sorted_idx = sort { $from[$a] <=> $from[$b] } 0 .. $#from;
	$self->chunk = [ @{ $stream->chunk }[ @sorted_idx ] ];
	$self;
}


package Stream::Simple; ########################################################
use parent -norequire => 'Stream';

sub parse_chunk { die }

sub split { die }

sub parse {
	my $self = shift;
	my @chunk = map {
		my ( $from, $to, $text ) = $self->parse_chunk( $_, @_ );
		Chunk->new( from => $from, to => $to, text => $text );
	} $self->split( @_ );
	$self->chunk = \@chunk;
}

sub format_chunk { die }

sub print {
	my $self = shift;
	my $i;
	say $self->format_chunk( $_, ++$i ) for $self->chunks;
}


package Stream::SRT; ###########################################################
use parent -norequire => 'Stream::Simple';

sub parse_time {
	my $self = shift;
	my ( $time ) = @_;
	$time =~ /\A(?<h>\d\d):(?<m>\d\d):(?<s>\d\d),(?<ms>\d{3})\z/
		or return;
	my $t = 1000 * ( 60 * ( 60 * $+{h} + $+{m} ) + $+{s} ) + $+{ms};
	return $t;
}

sub parse_chunk {
	my $self = shift;
	my ( $chunk ) = @_;
	( undef, my $time, my $text ) = split /\n/, $chunk, 3;
	my ( $from, $to ) = map { $self->parse_time( $_ ) } split / --> /, $time;
	return ( $from, $to, $text );
}

sub split { split /\n\s*\n/, $_[1] }

sub format_time {
	my $self = shift;
	my ( $t ) = @_;
	my $ms = 1000;
	my $s  = 60;
	my $m  = 60;
	for my $unit ( $ms, $s, $m ) {
		( $unit, $t ) = ( $t % $unit, int $t / $unit );
	}
	sprintf '%02d:%02d:%02d,%03d', $t, $m, $s, $ms;
}

sub format_chunk {
	my $self = shift;
	my ( $chunk, $idx ) = @_;
	my $time = join ' --> ', map { $self->format_time( $_ ) } $chunk->from, $chunk->to;
	( my $text = $chunk->text ) =~ s!\n*\z!!;
	join "\n", $idx, $time, $text, '';
}


package Stream::MicroDVD; ########################################## .SUB format
use parent -norequire => 'Stream::Simple';
use Object::Tiny::Lvalue qw( fps );

sub parse_frames {
	my $self = shift;
	my ( $frames ) = @_;
	return if not defined $frames;
	return ( $frames * 1000.0 ) / $self->fps;
}

sub parse_chunk {
	my $self = shift;
	my ( $chunk ) = @_;
	$chunk =~ m/\A\{(\d+)\}\{(\d+)\}(.+)\z/s or return;
	my ( $from, $to ) = map { $self->parse_frames( $_ ) } $1, $2;
	( my $text = $3 . "\n" ) =~ s!\|!\n!g;
	return ( $from, $to, $text );
}

sub split { split /\n/, $_[1] }


package Stream::SAMI; ############################################## .SMI format
use parent -norequire => 'Stream::Simple';

sub parse_chunk {
	my $self = shift;
	my ( $chunk ) = @_;

	$chunk =~ s/<sync(?: ([^>]*))?>//si or return;
	my ( undef, %attr ) = split / *(\w+)=/, $1;
	do { my @k = keys %attr; @attr{ map lc, @k } = delete @attr{ @k } };
	my ( $from, $to ) = @attr{ qw( start end ) };

	require HTML::Entities;

	my $text = $chunk;
	for ( $text ) {
		s!</sync *>!!;
		s!(?<=\w) *\n[\n ]*(?=\w)! !g;
		s!\n+!!g;
		s!<(?:p|br)(?: [^>]*)?/?>!\n!gi;
		s!<(?:p|br)(?: [^>]*)?/?>!\n!gi;
		s!<[^>]*>!!;
		$_ = HTML::Entities::decode( $_ );
		s!\xA0! !g;
		s![ \t]{2,}! !g;
		s! \+\Z!!mg;
		s!\A[\n ]+!!;
		s![\n ]+\z!!;
		return if not length;
		$_ .= "\n";
	}

	return ( $from, $to, $text );
}

sub split { $_[1] =~ m!<body(?: [^>]*)?>(.*)</body>!sgi ? split /(?=<sync[ >])/i, $1 : () }
